<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Minesweeper"
        xmlns:MyViewModel="clr-namespace:Minesweeper.MyViewModel" x:Class="Minesweeper.MainWindow"
        mc:Ignorable="d"
        Title="Minesweeper" SizeToContent="WidthAndHeight" Height="Auto" Width="Auto" MinWidth="250" MinHeight="310" ResizeMode="NoResize">
    <Window.DataContext>
        <MyViewModel:MainVM/>
    </Window.DataContext>
    <Window.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFBBBBBB"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FF999999"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FF777777"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding Path=sousedni_miny}" Value="1">
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Blue"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=sousedni_miny}" Value="2">
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Green"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=sousedni_miny}" Value="3">
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Red"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=sousedni_miny}" Value="4">
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Purple"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=sousedni_miny}" Value="5">
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Maroon"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=sousedni_miny}" Value="6">
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Turquoise"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=sousedni_miny}" Value="7">
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Black"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=sousedni_miny}" Value="8">
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Gray"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        
        <DockPanel VerticalAlignment="Top" HorizontalAlignment="Stretch" Height="20">
            <Menu DockPanel.Dock="Top">
                <MenuItem Header="Game">
                    <MenuItem Header="Beginner" Command="{Binding Path=StartGameCommand}" CommandParameter="1"/>
                    <MenuItem Header="Advanced" Command="{Binding Path=StartGameCommand}" CommandParameter="2"/>
                    <MenuItem Header="Expert" Command="{Binding Path=StartGameCommand}" CommandParameter="3"/>
                    <Separator />
                    <MenuItem Header="Custom" Command="{Binding Path=CustomGameCommand}"/>
                    <Separator />
                    <MenuItem Header="Continue" Command="{Binding Path=ContinueGameCommand}"/>
                    <Separator />
                    <MenuItem Header="List of games" Command="{Binding Path=ListGameCommand}"/>
                    <Separator />
                    <MenuItem Header="Quit game" Command="{Binding Path=QuitGameCommand}"/>
                </MenuItem>
                <MenuItem Header="Help">
                    <MenuItem Header="How to play" Command="{Binding Path=HowToCommand}"/>
                    <MenuItem Header="About" Command="{Binding Path=AboutCommand}"/>
                </MenuItem>
            </Menu>
        </DockPanel>
        <TextBlock Text="{Binding Path=RemainingMines, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Foreground="Red" Background="Black" Height="30" Width="70" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10 30" FontSize="24" FontFamily="Courier New" TextAlignment="Right" FontWeight="Bold"/>
        <TextBlock Text="{Binding Path=Time, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Foreground="Red" Background="Black" Height="30" Width="70" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="10 30" FontSize="24" FontFamily="Courier New" FontWeight="Bold" TextAlignment="Right"/>

        <ItemsControl x:Name="Pole" ItemsSource="{Binding Path=Pole, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="10 70 10 10">

            <ItemsControl.Resources>
                <BitmapImage x:Key="flag-bitmap-img" UriSource="/images/flag.png"/>
                <Image x:Key="flag-img" x:Shared="false" Source="{StaticResource flag-bitmap-img}"/>
                <BitmapImage x:Key="mine-bitmap-img" UriSource="/images/mine.png"/>
                <Image x:Key="mine-img" x:Shared="false" Source="{StaticResource mine-bitmap-img}"/>
                <BitmapImage x:Key="wrong-mine-bitmap-img" UriSource="/images/wrongMine.png"/>
                <Image x:Key="wrong-mine-img" x:Shared="false" Source="{StaticResource wrong-mine-bitmap-img}"/>
                <BitmapImage x:Key="stepped-mine-bitmap-img" UriSource="/images/steppedMine.png"/>
                <Image x:Key="stepped-mine-img" x:Shared="false" Source="{StaticResource stepped-mine-bitmap-img}"/>
            </ItemsControl.Resources>
            
            <!-- This panel will be used to hold the items -->
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <UniformGrid Rows="{Binding Path=NumRows, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                 Columns="{Binding Path=NumColumns, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

            <!-- Each item will be drawn using this template -->
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button Name="btn" Width="24" Height="24" Style="{StaticResource ButtonStyle1}">
                        <Button.InputBindings>
                            <MouseBinding Gesture="LeftClick" Command="{Binding ElementName=Pole, Path=DataContext.LeftButton}"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"/>
                            <MouseBinding Gesture="RightClick" Command="{Binding ElementName=Pole, Path=DataContext.RightButton}"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"/>
                        </Button.InputBindings>
                    </Button>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=odkryto}" Value="True">
                            <Setter TargetName="btn" Property="IsEnabled"  Value="False"/>
                            <Setter TargetName="btn" Property="Content" Value="{Binding sousedni_miny}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=sousedni_miny}" Value="0">
                            <Setter TargetName="btn" Property="Content" Value=""/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Flag}" Value="true">
                            <Setter TargetName="btn" Property="Content" Value="{StaticResource ResourceKey=flag-img}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=NotRevealed}" Value="true">
                            <Setter TargetName="btn" Property="Content" Value="{StaticResource ResourceKey=mine-img}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=WrongFlag}" Value="true">
                            <Setter TargetName="btn" Property="Content" Value="{StaticResource ResourceKey=wrong-mine-img}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=SteppedMine}" Value="true">
                            <Setter TargetName="btn" Property="Content" Value="{StaticResource ResourceKey=stepped-mine-img}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </Grid>
</Window>
